version: '3.8'

volumes:
    todos-postgres-data:
    cache:
        driver: local

services:
    # These are the configurations for our Node app
    # When Docker Compose starts this container it will automatically
    # use the Dockerfile in the directory to configure it
    app:
        image: node:16-alpine
        working_dir: /usr/app
        volumes:
            - ./:/usr/app
        depends_on:
            # Our app does not work without our database
            # so this ensures our database is loaded first
            - postgres
        links:
            - postgres
        ports:
            - 3000:3000
            - 9229:9229
        command: sh -c "sleep 3 && yarn migrate:latest && yarn dev"
        environment:
            NPM_TOKEN: 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
            DATABASE_HOST: postgres
            DATABASE_PORT: 5432
            DATABASE_SCHEMA: dev
            DATABASE_USER: dev
            DATABASE_PASSWORD: dev@123
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
            POSTGRES_DATABASE: dev
            POSTGRES_USER: dev
            POSTGRES_PASSWORD: dev@123
    # This is the configuration for our PostgreSQL database container
    # Note the `postgres` name is important, in out Node app when we refer
    # to  `host: "postgres"` that value is mapped on the network to the
    # address of this container.
    postgres:
        image: postgres
        restart: always
        environment:
            # You can set the value of environment variables
            # in your docker-compose.yml file
            # Our Node app will use these to connect
            # to the database
            POSTGRES_USER: dev
            POSTGRES_PASSWORD: dev@123
        ports:
            # Standard port for PostgreSQL databases
            - '5432:5432'
        volumes:
            - todos-postgres-data:/var/lib/postgresql/data

    # PostgreSQL pgAdmin panel accessible at http://localhost:6543/
    pgadmin-compose:
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_USER: 'dev'
            PGADMIN_DEFAULT_PASSWORD: 'dev@123'
            PGADMIN_DEFAULT_EMAIL: 'dev@gmail.com'
        ports:
            - '6543:80'
        depends_on:
            - postgres

    #Kafka
    zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    broker:
        image: confluentinc/cp-kafka:7.3.0
        container_name: broker
        ports:
            - '9092:9092'
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    #Redis
    cache:
        image: redis:latest
        restart: always
        ports:
            - '6379:6379'
        command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        volumes:
            - cache:/data
